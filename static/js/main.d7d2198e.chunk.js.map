{"version":3,"sources":["components/autoshrinking.js","App.js","serviceWorker.js","index.js"],"names":["AutoShrinking","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","scale","node","actualScale","parentNode","offsetWidth","setState","_this2","react_default","a","createElement","className","style","transform","concat","ref","props","children","React","Component","App","input","buttonClicked","bind","assertThisInitialized","reset","toggle","zero","dot","percentage","chooseOperand","evaluate","digit","operator","math","e","test","autoshrinking","onClick","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.d7d2198e.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nclass AutoShrinking extends React.Component {\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.state = {\r\n\t\t\tscale: 1\r\n\t\t}\r\n\t}\r\n\r\n\tcomponentDidUpdate() {\r\n\t\tconst { scale } = this.state;\r\n\t\tconst node = this.node;\r\n\t\tconst parentNode = node.parentNode;\r\n\r\n\t\tconst availableWidth = parentNode.offsetWidth;\r\n\t\tconst actualWidth = node.offsetWidth;\r\n\t\tconst actualScale = availableWidth / actualWidth;\r\n\r\n\t\tif(scale === actualScale)\r\n\t\t\treturn\r\n\r\n\t\tif (actualScale < 1) {\r\n\t\t\tthis.setState({ scale: actualScale});\r\n\t\t}\r\n\t\telse if (scale < 1) {\r\n\t\t\tthis.setState({ scale: 1 })\r\n\t\t}\r\n\t}\r\n\r\n\trender() {\r\n\t\tconst { scale } = this.state;\r\n\t\treturn <div className=\"display-screen\"><div \r\n\t\tclassName=\"display\" \r\n\t\tstyle = {{ transform: `scale(${scale}, ${scale})` }}\r\n\t\tref={node => this.node = node}>{this.props.children}</div></div>\r\n\t\t} \r\n}\r\n\r\n\r\nexport default AutoShrinking;","import React, { Component } from 'react';\nimport './App.css';\nimport Display from './components/display';\nimport AutoShrinking from './components/autoshrinking';\nimport * as math from 'mathjs';\n\nclass App extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      input: 0\n    }\n    this.buttonClicked = this.buttonClicked.bind(this);\n    this.reset = this.reset.bind(this);\n    this.toggle = this.toggle.bind(this);\n    this.zero = this.zero.bind(this);\n    this.dot = this.dot.bind(this);\n    this.percentage = this.percentage.bind(this);\n    this.chooseOperand = this.chooseOperand.bind(this);\n    this.evaluate = this.evaluate.bind(this);\n  }\n\n  buttonClicked(digit) {\n    (this.state.input === 0)\n    ? (this.setState({input: digit}))\n    : (this.setState({input: this.state.input + digit}));\n  }\n\n  dot(operator) {\n    (this.setState({input: this.state.input + operator}));\n  }\n\n  zero(digit) {\n    (this.state.input === 0)\n    ? (this.setState({input: 0}))\n    : (this.setState({input: this.state.input + digit}));\n  }\n\n  percentage(operator) {\n    this.setState({input: this.state.input / 100}); \n  }\n\n  chooseOperand(operator) {\n    (this.setState({input: this.state.input + operator}));\n  }\n\n\n  evaluate() {\n    try {\n        math.eval(this.state.input);\n    }\n    catch(e) {\n      if (e) {\n        this.setState({input: 'Error'});\n        return 0;\n      }\n    }\n    this.setState({input: math.eval(this.state.input)});\n  }\n  \n  reset(digit) {\n    this.setState({ input: 0});\n  }\n\n  toggle() {\n    let notNumberOnly = /[+%/*.]/;\n    if (notNumberOnly.test(this.state.input))\n    { \n      this.setState({input: 0});\n    }    \n    else {\n        this.setState({input: this.state.input * -1});\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n\n        <div className=\"container\">\n          <AutoShrinking>{this.state.input}</AutoShrinking>\n          <div className=\"row\">\n            <div onClick={() => this.reset('C')} className=\"col dark-grey\">C</div>\n            <div onClick={() => this.toggle('+/-')} className=\"col dark-grey\">+/-</div>\n            <div onClick={() => this.percentage('%')} className=\"col dark-grey\">%</div>\n            <div onClick={() => this.chooseOperand('/')} className=\"col orange\">/</div>\n          </div>\n          <div className=\"row\">\n            <div onClick={() => this.buttonClicked('7')} className=\"col light-grey\">7</div>\n            <div onClick={() => this.buttonClicked('8')} className=\"col light-grey\">8</div>\n            <div onClick={() => this.buttonClicked('9')} className=\"col light-grey\">9</div>\n            <div onClick={() => this.chooseOperand('*')} className=\"col orange\">*</div>\n          </div>\n          <div className=\"row\">\n            <div onClick={() => this.buttonClicked('4')} className=\"col light-grey\">4</div>\n            <div onClick={() => this.buttonClicked('5')} className=\"col light-grey\">5</div>\n            <div onClick={() => this.buttonClicked('6')} className=\"col light-grey\">6</div>\n            <div onClick={() => this.chooseOperand('-')} className=\"col orange\">-</div>\n          </div>\n          <div className=\"row\">\n            <div onClick={() => this.buttonClicked('1')} className=\"col light-grey\">1</div>\n            <div onClick={() => this.buttonClicked('2')} className=\"col light-grey\">2</div>\n            <div onClick={() => this.buttonClicked('3')} className=\"col light-grey\">3</div>\n            <div onClick={() => this.chooseOperand('+')} className=\"col orange\">+</div>\n          </div>\n          <div className=\"row\">\n            <div onClick={() => this.zero('0')} className=\"col-6 light-grey\">0</div>\n            <div onClick={() => this.dot('.')} className=\"col-3 light-grey\">.</div>\n            <div onClick={() => this.evaluate('=')} className=\"col-3 orange\">=</div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}